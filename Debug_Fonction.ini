

/* Analog0(float Maxi)
* Simule un signal variable analogique appliqué à l’entrée AN0.
* Argument d’entrée à fournir : la valeur maxi du signal.
* Forme du signal : périodique, fonction toit asymétrique, par incré-
* ments (ou décréments) de 0,1V.
*/ 

FUNC void sigset(void)
{
		PortB |= 1 << 6;
		PortA |= 1 << 6;
}
FUNC void sigreset()
{
		PortB &= ~(1 << 6) ; /* Signal appliqué au VTREG ADC1_IN0 */
		PortA &= ~(1 << 6) ;
}
Signal void stest(float m)
{
	int i;
	while(1)
	{
		for(i = 0; i < 5; i++)
		{
			sigset();
			swatch(m*0.001*15);
			sigreset();
			swatch(m*0.001*85);
		}
		for(i = 0;i < 5; i++)
		{
			sigset();
			swatch(m*0.001*5);
			sigreset();
			swatch(m*0.001*95);
		}
	}
}
Signal void Analog0 (float Maxi)
{ 

	float SignAnalog ;
	
	printf ("Signal en marche. Maximum = %f \n", Maxi) ;
	while (1) /* à l’infini... Donc signal périodique */
	{
		SignAnalog = 0.0 ; 
		while (SignAnalog <= Maxi) /* Croissance linéaire du signal */
		{
			PortB |= 1 << 6; /* Signal appliqué au VTREG ADC1_IN0 */
			PortA |= 1 << 6;
			swatch (0.01) ; /* Attendre 4 secondes */
			SignAnalog = SignAnalog + 0.1 ; /* Signal croît */
			
		}
		SignAnalog = Maxi ;
		while (SignAnalog >= 0.0) /* Décroissance linéaire */
		{
			PortB &= ~(1 << 6) ; /* Signal appliqué au VTREG ADC1_IN0 */
			PortA &= ~(1 << 6) ;
			swatch (0.02) ; /* Attendre 2 secondes */
			SignAnalog = SignAnalog - 0.2 ; /* Signal décroît */
			
		}
	}
}


FUNC void SansArret (void)
{
if ((PORTB & 0x200) == 0) /* PORTB est un VTREG : on teste la borne GPIOB.9 */
	printf ("La borne GPIOB.9 est à 0 \n") ;
else							
	printf ("Bip %x\n",PORTB) ;
}

FUNC void AvecArret (void)
{
if ((PORTB & 0x200) == 0) /* PORTB est un VTREG : on teste la borne GPIOB.9 */
	{
	printf ("La borne GPIOB.9 est à 0 \n") ;
	_break_=1;
	}
else						
	printf ("Bip %x\n",PORTB) ;
}



FUNC void SemiArret (void)
{
if ((PORTB & 0x200) == 0) /* PORTB est un VTREG : on teste la borne GPIOB.9 */
	{
	printf ("La borne GPIOB.9 est à 0 \n") ;
	_break_=1;
	}
else
	{							
	printf ("Bip %x\n",PORTB) ;
	_break_=0 ;
	}
}






/* Etat()
* Indique le niveau d’entrée appliqué à AN0, et qqs registres.
*/

FUNC void Etat (void)
{ /* pas de variables locales dans cet exemple */
printf ("===============================================\n") ;
printf (" Entree analogique-0 : %f Volts \n", ADC1_IN1) ; /* VTREG ADC1_IN1 */
printf ("===============================================\n\n") ;
printf ("****************** Registres du STM32 *******************\n") ;
printf ("*   R1         R2        R3        R4        R5        R6 \n") ;
printf ("* %08X  %08X  %08X  %08X  %08X  %08X \n", R1, R2, R3, R4, R5, R6) ; /* registres */
printf ("********************************************************\n") ;
printf ("* Registre (SP) : %04X \n", R13) ;
printf ("* Program Counter : %06LX \n",R15 ) ; /* PC courant */
printf ("******************************************************** \n") ;
}


